{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hello World!</p> <p>Hi, I'm Solehudin, software development enthusiast especially about frontend development. This web is for notes or documentation usage about software development, tools, or other notes.</p>"},{"location":"#notes-about","title":"Notes about","text":"<p>Development</p> <p>About software development, like as frontend, backend, devops, etc.</p> <p>Tools</p> <p>Contain notes of about tools development.</p> <p>Blog</p> <p>Blog or other free notes.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/07/06/custom-ui-firefox/","title":"Custom UI Firefox","text":"<p>Firefox is a popular web browser that is known for its customizability. You can change the look and feel of Firefox by installing themes and extensions. Also can customize the UI by change via css. In this article, I will show you how to customize the Firefox UI using a <code>userChrome.css</code> file from the open source project.</p>"},{"location":"blog/2024/07/06/custom-ui-firefox/#what-is-userchromecss","title":"What is userChrome.css?","text":"<p><code>userChrome.css</code> is a file that allows you to customize the Firefox user interface. It is a CSS file that can be used to change the appearance of Firefox, such as the color of the tabs, the size of the toolbar buttons, and the spacing between elements. You can use <code>userChrome.css</code> to make Firefox look the way you want.</p>"},{"location":"blog/2024/07/06/custom-ui-firefox/#why-customize-firefox-ui","title":"Why customize Firefox UI?","text":"<p>There are several reasons why you might want to customize the Firefox UI:</p> <ul> <li>Personalization: You can make Firefox look the way you want by customizing the UI.</li> <li>Productivity: You can make Firefox more efficient by customizing the UI to suit your workflow.</li> <li>Accessibility: You can make Firefox easier to use by customizing the UI to meet your needs.</li> </ul>"},{"location":"blog/2024/07/06/custom-ui-firefox/#how-to-customize-firefox-ui","title":"How to customize Firefox UI?","text":"<p>There are open source projects that provide <code>userChrome.css</code> files that you can use to customize the Firefox UI. You can search in github or find in website https://firefoxcss-store.github.io/. You can also create your own <code>userChrome.css</code> file to customize the Firefox UI. But, I will show you how to use the <code>userChrome.css</code> file from the open source project.</p> <p>To customize the Firefox UI using a <code>userChrome.css</code> file from the open source project, follow these steps:</p> <ol> <li>Go to https://firefoxcss-store.github.io/. Select one of theme that you like. For example, I will use the <code>AutoColor-Minimal-Proton</code> theme. Visit the repository and download the <code>userChrome.css</code> file.</li> <li>Follow the installation instructions provided in the repository. Usually, you only need to copy the <code>userChrome.css</code> file to the <code>chrome</code> folder in your Firefox profile directory.</li> <li> <p>Open the Firefox profile directory. Open a new tab in firefox and write in url bar <code>about:support</code>, you should see a list with your firefox data. You only need \"Profile folder\" , you can now click in \"Open folder\" button o copy the address to your profile folder.</p> <p>The address should be similar to following example depend of your system:</p> <ul> <li>Linux - <code>$HOME/.mozilla/firefox/XXXXXXX.default-XXXXXX/</code></li> <li>Windows 10 - <code>C:\\Users\\&lt;USERNAME&gt;\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\XXX.default-XXX</code></li> <li>macOS - <code>Users/&lt;USERNAME&gt;/Library/Application Support/Firefox/Profiles/XXXXXXX.default-XXXXXXX</code></li> </ul> </li> <li> <p>Go to that <code>XXXXXXX.default-XXXXXXX</code> folder. If there is no folder called <code>chrome</code>, create it.</p> </li> <li>Copy the <code>userChrome.css</code> file that you downloaded to the <code>chrome</code> folder.</li> <li>Go to firefox ,open a new tab and write <code>about:config</code> in the url bar</li> <li>A dialog will warn you, but ignore it, just do it press the <code>I accept the risk!</code> button.</li> <li>Search this <code>toolkit.legacyUserProfileCustomizations.stylesheets</code> and set to true.</li> <li>Install Extension Adaptive Tab Bar Color here. Change settings of that extension.     </li> <li>Restart Firefox</li> <li>That's all, after restarting you should be able to see the changes in the Firefox UI.</li> </ol>"},{"location":"blog/2024/07/06/custom-ui-firefox/#result","title":"Result","text":""},{"location":"blog/2024/07/06/custom-ui-firefox/#reference","title":"Reference","text":"<ul> <li>Firefox CSS Store</li> <li>AutoColor-Minimal-Proton</li> </ul>"},{"location":"blog/2024/07/06/use-github-as-free-cdn/","title":"Use Github as Free CDN","text":"<p>Github is one of the most popular git repository hosting services. But did you know that you can also use Github as a free CDN? In this article, i will show you how to use Github as a free CDN.</p>"},{"location":"blog/2024/07/06/use-github-as-free-cdn/#what-is-cdn","title":"What is CDN?","text":"<p>CDN stands for Content Delivery Network. It is a network of servers that are distributed geographically to deliver web content more efficiently to users. CDN servers are located in different parts of the world, so when a user requests a web page, the content is delivered from the server that is closest to them. This reduces latency and improves the performance of the website.</p>"},{"location":"blog/2024/07/06/use-github-as-free-cdn/#why-use-github-as-a-cdn","title":"Why use Github as a CDN?","text":"<p>There are several reasons why you might want to use Github as a CDN:</p> <ul> <li>Free: Github is free to use, so you can use it as a CDN without any additional cost.</li> <li>Fast: Github has servers located all over the world, so your content will be delivered quickly to users no matter where they are located.</li> <li>Reliable: Github has a good track record of uptime and reliability, so you can trust that your content will be available when users request it.</li> <li>Easy to use: Github is easy to use, so you can quickly set up your content to be delivered via the CDN.</li> </ul>"},{"location":"blog/2024/07/06/use-github-as-free-cdn/#how-to-use-github-as-a-cdn","title":"How to use Github as a CDN","text":"<p>To use Github as a CDN, you need to follow these steps:</p> <ol> <li> <p>Upload your content to Github: First, you need to upload the content that you want to deliver via the CDN to a Github repository. You can upload any type of content, such as images, CSS files, JavaScript files, etc.</p> </li> <li> <p>Get the raw URL of the content: Once you have uploaded your content to Github, you need to get the raw URL of the content. To do this, go to the file in your Github repository, click on the \"Raw\" button, and copy the URL from the address bar.      Click Raw button in the opened file </p> <p>Or you can using format url like this:</p> <pre><code>https://raw.githubusercontent.com/&lt;username&gt;/&lt;repository&gt;/&lt;branch&gt;/path/to/file\n</code></pre> </li> <li> <p>Use the raw URL in your website: Finally, you need to use the raw URL of the content in your website. You can link to the raw URL directly in your HTML code, or you can use it in your CSS or JavaScript files.</p> <p>For example, if you want to use an image from Github in your website, you can use the following HTML code:</p> <pre><code>&lt;img\n  src=\"https://raw.githubusercontent.com/&lt;username&gt;/&lt;repository&gt;/&lt;branch&gt;/path/to/image.jpg\"\n  alt=\"Image\"\n/&gt;\n</code></pre> <p>Or if you want to use a CSS file from Github in your website, you can use the following HTML code:</p> <pre><code>&lt;link\n  rel=\"stylesheet\"\n  href=\"https://raw.githubusercontent.com/&lt;username&gt;/&lt;repository&gt;/&lt;branch&gt;/path/to/style.css\"\n/&gt;\n</code></pre> <p>Or if you want to use a JavaScript file from Github in your website, you can use the following HTML code:</p> <pre><code>&lt;script src=\"https://raw.githubusercontent.com/&lt;username&gt;/&lt;repository&gt;/&lt;branch&gt;/path/to/script.js\"&gt;&lt;/script&gt;\n</code></pre> </li> </ol> <p>That's it! You have now successfully set up Github as a free CDN for your website.</p>"},{"location":"blog/2024/07/06/use-github-as-free-cdn/#alternative","title":"Alternative","text":"<p>If you want to use Github as a CDN for your website, but you don't want to use the raw URL of the content, you can use a service like jsDelivr. These services allow you to use Github as a CDN by providing a CDN URL that you can use in your website.</p> <p>To use jsDelivr as a CDN for your Github content, see docs here.</p> <p>For example, if you want to use an image from Github in your website using jsDelivr, you can use the following HTML code:</p> <pre><code>&lt;img\n  src=\"https://cdn.jsdelivr.net/gh/&lt;username-github&gt;/&lt;repository-github&gt;/path/to/image.jpg\"\n  alt=\"Image\"\n/&gt;\n</code></pre> <p>Or if you want to use a CSS file from Github in your website using jsDelivr, you can use the following HTML code:</p> <pre><code>&lt;link\n  rel=\"stylesheet\"\n  href=\"https://cdn.jsdelivr.net/gh/&lt;username-github&gt;/&lt;repository-github&gt;/path/to/style.css\"\n/&gt;\n</code></pre> <p>Or if you want to use a JavaScript file from Github in your website using jsDelivr, you can use the following HTML code:</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/gh/&lt;username-github&gt;/&lt;repository-github&gt;/path/to/script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"blog/2024/07/06/use-github-as-free-cdn/#conclusion","title":"Conclusion","text":"<p>Using Github as a free CDN is a great way to deliver web content quickly and efficiently to users. Github is free to use, fast, reliable, and easy to use, making it an ideal choice for a CDN. By following the steps outlined in this article, you can easily set up Github as a CDN for your website and improve the performance of your website for users all over the world.</p>"},{"location":"dev/","title":"Development","text":"<p>These section are about development notes, documentation, or tutorial of frontend, backend, devops, or other.</p>"},{"location":"dev/frontend/","title":"Frontend Dev","text":"<p>Hello World</p>"},{"location":"dev/docker/basic/","title":"Common Use","text":""},{"location":"dev/docker/basic/#build-image","title":"Build Image","text":"<pre><code>docker build -t image-name ./path-dockerfile\n</code></pre>"},{"location":"dev/docker/basic/#pull-image","title":"Pull Image","text":"<pre><code>docker pull image-name\n</code></pre>"},{"location":"dev/docker/basic/#run-container","title":"Run Container","text":"<pre><code>docker run -d --name container-name -p HOST_PORT:_CONTAINER_PORT -t image-name\n</code></pre>"},{"location":"dev/docker/basic/#delete-image-container","title":"Delete Image &amp; Container","text":"Delete Container<pre><code>docker rm -f container-name|container-id\n</code></pre> Delete Image<pre><code>docker rmi image-name|image-id\n</code></pre>"},{"location":"dev/docker/basic/#reference","title":"Reference","text":"<ul> <li>Docker Docs</li> </ul>"},{"location":"dev/docker/docker-compose/","title":"Docker Compose","text":""},{"location":"dev/docker/docker-compose/#overview","title":"Overview","text":"<p>Docker Compose is a tool for defining and running multi-container applications. It simplifies the control of our entire application stack, making it easy to manage services, networks, and volumes in a single, comprehensible YAML configuration file.</p>"},{"location":"dev/docker/docker-compose/#compose-file","title":"Compose File","text":"<p>Docker Compose relies on a YAML configuration file, usually named:</p> <ul> <li><code>compose.yaml</code> (preferred)</li> <li><code>compose.yml</code></li> <li><code>docker-compose.yaml</code></li> <li><code>docker-compose.yaml</code></li> </ul>"},{"location":"dev/docker/docker-compose/#compose-specification","title":"Compose Specification","text":"compose.yaml (example)<pre><code>version: 3.8 # (1)!\n\nname: myapp # (2)!\n\nservices: # (3)!\n  fe:\n    container_name: fe # (4)!\n    build: . # (5)!\n\n  be:\n    container_name: be\n    image: imagename:tag # (6)!\n\nnetworks: # (7)!\n  my-network:\n\nvolumes: # (8)!\n  my-volume:\n\nconfigs: # (9)!\n  http_config:\n    external: true\n\nsecrets: # (10)!\n  server-certificate:\n    file: ./server.cert\n</code></pre> <ol> <li>version: defined by the Compose Specification for backward compatibility. It is only informative &amp; optional.</li> <li>name: name of project, as prefix for every services.</li> <li>services: define services. In the example, there 2 services, \"fe\" and \"be\".</li> <li>container_name: container name of service</li> <li>build: path of dockerfile for build image</li> <li>image: If not use buid (path of dockerfile), we can also provide base image, image is define base image that used for the service</li> <li>networks: define custom network</li> <li>volumes: define custom volume</li> <li>configs: define config needed</li> <li>secrets: define secrets needed</li> </ol>"},{"location":"dev/docker/docker-compose/#rerefence","title":"Rerefence","text":"<ul> <li>Docker Compose</li> </ul>"},{"location":"dev/docker/dockerfile/","title":"Dockerfile","text":""},{"location":"dev/docker/dockerfile/#overview","title":"Overview","text":"<p>Dockerfile is a text file that contains a set of instructions used to build a Docker image.</p> <p>The Dockerfile specifies the steps needed to create a Docker image by defining the environment and configuration for the application or service it will contain. These instructions typically include:</p> <ul> <li> <p>Base Image: Specifies the base image to use for the container. This is typically an existing image from a registry like Docker Hub that provides a minimal operating system and runtime environment.</p> </li> <li> <p>Environment Configuration: Sets environment variables required by the application or service.</p> </li> <li> <p>Dependencies Installation: Installs any necessary packages, libraries, or tools needed by the application.</p> </li> <li> <p>Application Setup: Copies application code and configuration files into the image and configures the container environment.</p> </li> <li> <p>Expose Ports: Specifies which network ports the container will listen on at runtime.</p> </li> <li> <p>Container Execution Command: Defines the command or entry point to execute when the container starts.</p> </li> </ul>"},{"location":"dev/docker/dockerfile/#instruction","title":"Instruction","text":""},{"location":"dev/docker/dockerfile/#from","title":"FROM","text":"<p>Initialize a new build stage from a base image</p> FROM<pre><code>FROM nginx:alpine3.18-slim\n</code></pre>"},{"location":"dev/docker/dockerfile/#run","title":"RUN","text":"<p>Execute any commands to create a new layer on top of the current image, execute when build stage.</p> RUN<pre><code>FROM nginx:alpine3.18-slim\n\nRUN mkdir hello\nRUN echo \"HELLO WORLD\" &gt; \"hello/world.txt\"\n</code></pre>"},{"location":"dev/docker/dockerfile/#cmd","title":"CMD","text":"<p>Sets the command to be executed when running a container from an image. Format:  CMD [\"executable\",\"param1\",\"param2\"] (exec form) CMD [\"param1\",\"param2\"] (exec form, as default parameters to ENTRYPOINT) CMD command param1 param2 (shell form)</p> CMD<pre><code>FROM nginx:alpine3.18-slim\n\nRUN mkdir hello\nRUN echo \"HELLO WORLD\" &gt; \"hello/world.txt\"\n\nCMD cat \"hello/world.txt\"\n</code></pre>"},{"location":"dev/docker/dockerfile/#label","title":"LABEL","text":"<p>Add metadata to an image.</p> LABEL<pre><code>FROM nginx:alpine3.18-slim\n\nLABEL author=\"Solehudin\"\n</code></pre>"},{"location":"dev/docker/dockerfile/#add","title":"ADD","text":"<p>Copy new files, directories or remote file URLs from  and adds them to the filesystem of the image at the path . <p><code>Format:</code> <code>ADD [OPTIONS] &lt;src&gt; ... &lt;dest&gt; | ADD [OPTIONS] [\"&lt;src&gt;\", ... \"&lt;dest&gt;\"]</code></p> ADD<pre><code>FROM nginx:alpine3.18-slim\n\nRUN mkdir hello\nADD text/*.txt hello\n</code></pre>"},{"location":"dev/docker/dockerfile/#copy","title":"COPY","text":"<p>Copy new files or directories from  and adds them to the filesystem of the container at the path . <p><code>Format:</code> <code>COPY [OPTIONS] &lt;src&gt; ... &lt;dest&gt; | COPY [OPTIONS] [\"&lt;src&gt;\", ... \"&lt;dest&gt;\"]</code></p> COPY<pre><code>FROM nginx:alpine3.18-slim\n\nRUN mkdir hello\nCOPY text/*.txt hello\n</code></pre>"},{"location":"dev/docker/dockerfile/#expose","title":"EXPOSE","text":"<p>Inform Docker that the container listens on the specified network ports at runtime. You can specify whether the port listens on TCP or UDP, and the default is TCP if you don't specify a protocol.</p> EXPOSE<pre><code>FROM nginx:alpine3.18-slim\n\nCOPY *.html /usr/share/nginx/html\n\nEXPOSE 80/TCP\nEXPOSE 8181/UDP\n# or\n# EXPOSE 80\n</code></pre>"},{"location":"dev/docker/dockerfile/#env","title":"ENV","text":"<p>Set the environment variable  to the value . This value will be in the environment for all subsequent instructions in the build stage and can be replaced inline in many as well. Env is usually for container needs. ENV<pre><code>FROM nginx:alpine3.18-slim\n\nENV SAY_KEY=HELLO\n\nCOPY *.html /usr/share/nginx/html\n\nRUN echo \"&lt;h1&gt;${SAY_KEY}&lt;/h1&gt;\" &gt; \"/usr/share/nginx/html/index.html\"\n\nEXPOSE 80\n</code></pre>"},{"location":"dev/docker/dockerfile/#arg","title":"ARG","text":"<p>Define a variable that users can pass at build-time. Arg is usually only for image needs.</p> ARG<pre><code>FROM nginx:alpine3.18-slim\n\nARG SAY_KEY=HELLO\n</code></pre>"},{"location":"dev/docker/dockerfile/#workdir","title":"WORKDIR","text":"<p>Set the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile.</p> WORKDIR<pre><code>FROM nginx:alpine3.18-slim\n\nWORKDIR /app\n\n# hello.txt inside path /app\nRUN echo \"HELLO WORLD\" &gt; hello.txt\n\nEXPOSE 80\n</code></pre>"},{"location":"dev/docker/dockerfile/#entrypoint","title":"ENTRYPOINT","text":"<p>Allows us to configure a container that will run as an executable. In practice, CMD &amp; ENTRYPOINT are usually used together, ENTRYPOINT is used as the default command and CMD is used as an argument to the command in ENTRYPOINT.</p> ENTRYPOINT<pre><code>FROM nginx:alpine3.18-slim\n\nENTRYPOINT [ \"/bin/echo\" ,\"Hello, I'm from dockerfile\"]\n\n# ENTRYPOINT &amp; CMD\n# ENTRYPOINT [ \"/bin/echo\" ]\n# CMD [ \"Hello, I'm from dockerfile\" ]\n</code></pre>"},{"location":"dev/docker/dockerfile/#multi-stage-build","title":"Multi-stage Build","text":"<p>There are two main reasons for why we want to use multi-stage builds:</p> <ul> <li>They allow us to run build steps in parallel, making our build pipeline faster and more efficient.</li> <li>They allow us to create a final image with a smaller footprint, containing only what's needed to run our program.</li> </ul> Example<pre><code>FROM golang:1.18-alpine as builder\n\nWORKDIR /app\nCOPY . .\nRUN CGO_ENABLED=0 go build -o go-hello-world .\n\n#------------------\n\n# scratch can be said to be a blank image\n# You can also use the existing image\nFROM scratch\n\nWORKDIR /app\nCOPY --from=builder /app/go-hello-world .\n\nEXPOSE 8080\n\nENTRYPOINT [ \"./go-hello-world\" ]\n</code></pre> Example<pre><code>FROM python:3.13.0a4-alpine3.19 as builder\n\nWORKDIR /app\n\nRUN apk update &amp;&amp; apk add build-base\nRUN pip install --upgrade pip\n\nCOPY requirements.txt ./\nRUN pip install -r requirements.txt\n\nCOPY . .\nRUN mkdocs build\n\n\nFROM nginx:alpine3.18-slim\n\nWORKDIR /app\nCOPY --from=builder /app/site/ /usr/share/nginx/html/\n\nEXPOSE 80\n</code></pre>"},{"location":"dev/docker/dockerfile/#reference","title":"Reference","text":"<ul> <li> <p>Instruction</p> </li> <li> <p>Multi-stage build</p> </li> </ul>"},{"location":"dev/jenkins/install-jenkins/","title":"Install Jenkins","text":"<p>Step by step install jenkins with docker</p> Clone repository<pre><code>git clone https://github.com/solehudin5699/jenkins-setup.git\ncd jenkins-setup\n</code></pre>"},{"location":"dev/jenkins/install-jenkins/#create-bridge-network","title":"Create bridge network","text":"<p>This is usefull if we use docker as cloud agent of jenkins.</p> <pre><code>docker network create jenkins\n</code></pre>"},{"location":"dev/jenkins/install-jenkins/#build-image-create-run-container-jenkins","title":"Build image, create &amp; run container jenkins","text":"<p>Build and assign name image, example \"solehudin5699/jenkins-blueocean:2.440.1-1\"</p> Build image<pre><code>docker build -t solehudin5699/jenkins-blueocean:2.440.1-1 .\n\n# Or pull from my registry\ndocker pull solehudin5699/jenkins-blueocean:2.440.1-1\n</code></pre> Create &amp; run container jenkins<pre><code>docker run \\\n  --name jenkins-blueocean \\\n  --restart=on-failure \\\n  --detach \\\n  --network jenkins \\\n  --env DOCKER_HOST=tcp://docker:2375 \\\n  --env DOCKER_CERT_PATH=/certs/client \\\n  --env DOCKER_TLS_VERIFY=1 \\\n  --publish 8080:8080 \\\n  --publish 50000:50000 \\\n  --volume jenkins-data:/var/jenkins_home \\\n  --volume jenkins-docker-certs:/certs/client:ro \\\n  solehudin5699/jenkins-blueocean:2.440.1-1\n</code></pre>"},{"location":"dev/jenkins/install-jenkins/#post-installation-setup","title":"Post-installation setup","text":"<ol> <li>Browse to http://127.0.0.1:8080/</li> </ol> <p>In terminal:</p> <pre><code># get password\ndocker exec jenkins-blueocean cat /var/jenkins_home/secrets/initialAdminPassword\n</code></pre> <p>Copy paste password to continue the setup wizard.</p> <ol> <li>Install sugested plugins</li> </ol> <p></p> <ol> <li>Create admin user</li> </ol> <p></p> <ol> <li>Input jenkins url (e.g: http:127.0.0.1:8080/ or https://jenkins.yourdomain.com/). Save &amp; restart configuration. <p></p> </li> </ol>"},{"location":"dev/jenkins/setup-cloud/","title":"Setup Cloud Agent","text":""},{"location":"dev/jenkins/setup-cloud/#overview","title":"Overview","text":"<p>In previous step, we have installed jenkins as container, a.k.a jenkins master or jenkins controller. For run the job, jenkins master will handoff task to jenkins agent.</p> <p>A Jenkins agent, also known as a Jenkins slave, is a worker node in the Jenkins continuous integration and continuous delivery (CI/CD) system that performs build, test, or deployment tasks as directed by the Jenkins controller.</p> <p>Agents can be set up on various operating systems and can have different configurations, allowing Jenkins to distribute workload across multiple machines.</p> <p>Cloud agents, can be thought of as a collection or pool of agents that are provisioned dynamically from cloud infrastructure resources. These agents are typically spun up on-demand based on workload demands and are managed automatically by Jenkins.</p> <p>Use Case</p> <p>In this case, (1) i use docker daemon as cloud agent and (2) use container as clouds agent.</p> <p>Before next, install plugin Docker at Manage Jenkins &gt; Plugins &gt; Available plugin, search docker, then install.</p> <p></p>"},{"location":"dev/jenkins/setup-cloud/#docker-daemon-docker-host-as-clouds","title":"Docker daemon (docker host) as clouds","text":"<p>Because we run jenkins as container, to setup cloud agent, we must know unix or tcp address of the docker host. But since we are running jenkins as container, the container can't reach docker host unix port.</p> <p>So, we have to run another container that can mediate between docker host and jenkins container. See Issue.</p>"},{"location":"dev/jenkins/setup-cloud/#get-tcp-address-docker-host","title":"Get TCP address docker host","text":"Create container<pre><code>docker run -d --restart=always \\\n    --name socat --network jenkins \\\n    -p 127.0.0.1:2376:2375 \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    alpine/socat \\\n    tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock\n</code></pre> Get IPAddress<pre><code>docker inspect socat | grep -i IPAddress\n#example--&gt;     \"SecondaryIPAddresses\": null,\n#               \"IPAddress\": \"\",\n#               \"IPAddress\": \"172.19.0.2\",\n</code></pre> <p>Docker host URI is tcp://172.19.0.2:2375</p>"},{"location":"dev/jenkins/setup-cloud/#config-on-jenkins-master","title":"Config on jenkins master","text":"<p>Go to Dashboard &gt; Manage Jenkins &gt; Clouds &gt; New Cloud, select type Docker</p> <p>Input Docker Host URI, and test connection </p> <p>Add Docker Agent templates, and save it, example: </p> <p>We have set up a clouds and a template agent.</p>"},{"location":"dev/jenkins/setup-cloud/#container-as-cloud-agent","title":"Container as cloud agent","text":"<p>Basically, it's similarly with setup docker host as clouds. But, to approach it, the container must have docker in it, as know as <code>docker in docker</code>.</p> Run docker:dind<pre><code>docker run -d --restart=always \\\n  --name jenkins-docker \\\n  --privileged \\\n  --network jenkins \\\n  --network-alias docker \\\n  --env DOCKER_TLS_CERTDIR=\"\" \\\n  --volume jenkins-docker-certs:/certs/client \\\n  --volume jenkins-data:/var/jenkins_home \\\n  --publish 2375:2375 \\\n  docker:dind \\\n  --storage-driver overlay2\n</code></pre> <p>Next, we create new cloud, and for Docker Host URI field, we enter tcp://docker:2375 .</p>"},{"location":"dev/vps-setup/","title":"VPS Setup","text":"<p>Overview</p> <p>A virtual private server(VPS) is a machine that hosts all the software and data required to run an application or website. It is called virtual because it only consumes a portion of the server's underlying physical resources which are managed by a third-party provider. However, you get access to your dedicated resources on that hardware. aws.amazon.com.</p> <p>Disclaimer</p> <p>This setup is for setting up a VPS on Ubuntu.</p>"},{"location":"dev/vps-setup/#update-repositories","title":"Update Repositories","text":"Access VPS with SSH<pre><code>ssh user@ip-address\n</code></pre> Run in terminal<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"dev/vps-setup/#install-nginx","title":"Install Nginx","text":"<p>NGINX</p> <p>NGINX is a popular open-source web server that is also used as a reverse proxy, load balancer, and HTTP cache. It was initially designed to solve the C10k problem, which is the difficulty in handling more than 10,000 simultaneous connections. NGINX is known for its high performance, stability, rich feature set, simple configuration, and low resource consumption. It is used by many of the world's largest websites, including Netflix, Airbnb, and GitHub.</p> Run in terminal<pre><code>sudo apt update\nsudo apt install nginx\n</code></pre>"},{"location":"dev/vps-setup/#config-nginx-for-static-website-example","title":"Config Nginx for Static Website (Example)","text":"Run in terminal<pre><code>cd /var/www\nsudo chown user:group /html\ncd html\ngit clone [url-static-web-repository]\n\ncd /etc/nginx/sites-available\nsudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/yourmenu.escloud.my.id.conf\n</code></pre> Edit yourmenu.escloud.my.id.conf<pre><code>server {\n    listen 80;\n    listen [::]:80;\n\n    server_name yourmenu.escloud.my.id;\n\n    root /var/www/html/folder-repository;\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n</code></pre> Run in terminal<pre><code>sudo nginx -t\nsudo ln -s /etc/nginx/sites-available/yourmenu.escloud.my.id.conf /etc/nginx/sites-enabled/\nsudo service nginx restart\n</code></pre>"},{"location":"dev/vps-setup/#pointing-domain-to-vps-cloudflare","title":"Pointing Domain to VPS + Cloudflare","text":"<ol> <li>Register a domain, example escloud.my.id</li> <li>Login to Cloudflare, add site escloud.my.id    </li> <li>Copy Cloudflare nameserver    </li> <li>Paste Cloudflare nameserver to domain provider    </li> <li>Add A record in Cloudflare    </li> </ol>"},{"location":"dev/vps-setup/install-docker/","title":"Install Docker","text":"<ol> <li>Setup Docker's <code>apt</code> repository</li> </ol> Run in terminal<pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre> <ol> <li>Install the Docker packages</li> </ol> Run in terminal<pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <ol> <li>Verify that the Docker Engine installation is successful by running the hello-world image.</li> </ol> Run in terminal<pre><code>sudo docker run hello-world\n</code></pre>"},{"location":"dev/vps-setup/reverse-proxy/","title":"Reverse Proxy","text":""},{"location":"dev/vps-setup/reverse-proxy/#config-nginx-reverse-proxy","title":"Config Nginx Reverse Proxy","text":"Run in terminal<pre><code>cd /etc/nginx/sites-available\nsudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/my-website.id.conf\n</code></pre> <p>Edit <code>my-website.id.conf</code> file</p> my-website.id.conf<pre><code>upstream my-website {\n   server 127.0.0.1:9000;\n}\n\nserver {\n    server_name my-website.id;\n    listen       80;\n    listen  [::]:80;\n\n   location / {\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n\n      proxy_connect_timeout 300;\n\n      proxy_pass my-website;\n   }\n\n}\n</code></pre> Run in terminal<pre><code>sudo nginx -t # test configuration nginx\nsudo ln -s /etc/nginx/sites-available/my-website.id.conf /etc/nginx/sites-enabled/ # create a symlink to enable config\nsudo service nginx restart # restart nginx\n</code></pre>"},{"location":"dev/vps-setup/reverse-proxy/#pointing-domain-to-vps-cloudflare","title":"Pointing Domain to VPS + Cloudflare","text":"<p>Do the same as this steps here.</p>"},{"location":"tools/","title":"Tools","text":"<p>Data Not Found</p>"},{"location":"blog/archive/2024/","title":"2024","text":""}]}